/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDayScheduleArgs } from "./CreateDayScheduleArgs";
import { UpdateDayScheduleArgs } from "./UpdateDayScheduleArgs";
import { DeleteDayScheduleArgs } from "./DeleteDayScheduleArgs";
import { DayScheduleCountArgs } from "./DayScheduleCountArgs";
import { DayScheduleFindManyArgs } from "./DayScheduleFindManyArgs";
import { DayScheduleFindUniqueArgs } from "./DayScheduleFindUniqueArgs";
import { DaySchedule } from "./DaySchedule";
import { Status } from "../../status/base/Status";
import { User } from "../../user/base/User";
import { DayScheduleService } from "../daySchedule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DaySchedule)
export class DayScheduleResolverBase {
  constructor(
    protected readonly service: DayScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DaySchedule",
    action: "read",
    possession: "any",
  })
  async _daySchedulesMeta(
    @graphql.Args() args: DayScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DaySchedule])
  @nestAccessControl.UseRoles({
    resource: "DaySchedule",
    action: "read",
    possession: "any",
  })
  async daySchedules(
    @graphql.Args() args: DayScheduleFindManyArgs
  ): Promise<DaySchedule[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DaySchedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DaySchedule",
    action: "read",
    possession: "own",
  })
  async daySchedule(
    @graphql.Args() args: DayScheduleFindUniqueArgs
  ): Promise<DaySchedule | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DaySchedule)
  @nestAccessControl.UseRoles({
    resource: "DaySchedule",
    action: "create",
    possession: "any",
  })
  async createDaySchedule(
    @graphql.Args() args: CreateDayScheduleArgs
  ): Promise<DaySchedule> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        status: args.data.status
          ? {
              connect: args.data.status,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DaySchedule)
  @nestAccessControl.UseRoles({
    resource: "DaySchedule",
    action: "update",
    possession: "any",
  })
  async updateDaySchedule(
    @graphql.Args() args: UpdateDayScheduleArgs
  ): Promise<DaySchedule | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          status: args.data.status
            ? {
                connect: args.data.status,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DaySchedule)
  @nestAccessControl.UseRoles({
    resource: "DaySchedule",
    action: "delete",
    possession: "any",
  })
  async deleteDaySchedule(
    @graphql.Args() args: DeleteDayScheduleArgs
  ): Promise<DaySchedule | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Status, {
    nullable: true,
    name: "status",
  })
  @nestAccessControl.UseRoles({
    resource: "Status",
    action: "read",
    possession: "any",
  })
  async resolveFieldStatus(
    @graphql.Parent() parent: DaySchedule
  ): Promise<Status | null> {
    const result = await this.service.getStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: DaySchedule
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

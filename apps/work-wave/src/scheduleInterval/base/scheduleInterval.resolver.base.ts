/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScheduleIntervalArgs } from "./CreateScheduleIntervalArgs";
import { UpdateScheduleIntervalArgs } from "./UpdateScheduleIntervalArgs";
import { DeleteScheduleIntervalArgs } from "./DeleteScheduleIntervalArgs";
import { ScheduleIntervalCountArgs } from "./ScheduleIntervalCountArgs";
import { ScheduleIntervalFindManyArgs } from "./ScheduleIntervalFindManyArgs";
import { ScheduleIntervalFindUniqueArgs } from "./ScheduleIntervalFindUniqueArgs";
import { ScheduleInterval } from "./ScheduleInterval";
import { DaySchedule } from "../../daySchedule/base/DaySchedule";
import { ScheduleIntervalService } from "../scheduleInterval.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScheduleInterval)
export class ScheduleIntervalResolverBase {
  constructor(
    protected readonly service: ScheduleIntervalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScheduleInterval",
    action: "read",
    possession: "any",
  })
  async _scheduleIntervalsMeta(
    @graphql.Args() args: ScheduleIntervalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScheduleInterval])
  @nestAccessControl.UseRoles({
    resource: "ScheduleInterval",
    action: "read",
    possession: "any",
  })
  async scheduleIntervals(
    @graphql.Args() args: ScheduleIntervalFindManyArgs
  ): Promise<ScheduleInterval[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScheduleInterval, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScheduleInterval",
    action: "read",
    possession: "own",
  })
  async scheduleInterval(
    @graphql.Args() args: ScheduleIntervalFindUniqueArgs
  ): Promise<ScheduleInterval | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScheduleInterval)
  @nestAccessControl.UseRoles({
    resource: "ScheduleInterval",
    action: "create",
    possession: "any",
  })
  async createScheduleInterval(
    @graphql.Args() args: CreateScheduleIntervalArgs
  ): Promise<ScheduleInterval> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        daySchedule: args.data.daySchedule
          ? {
              connect: args.data.daySchedule,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScheduleInterval)
  @nestAccessControl.UseRoles({
    resource: "ScheduleInterval",
    action: "update",
    possession: "any",
  })
  async updateScheduleInterval(
    @graphql.Args() args: UpdateScheduleIntervalArgs
  ): Promise<ScheduleInterval | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          daySchedule: args.data.daySchedule
            ? {
                connect: args.data.daySchedule,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScheduleInterval)
  @nestAccessControl.UseRoles({
    resource: "ScheduleInterval",
    action: "delete",
    possession: "any",
  })
  async deleteScheduleInterval(
    @graphql.Args() args: DeleteScheduleIntervalArgs
  ): Promise<ScheduleInterval | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DaySchedule, {
    nullable: true,
    name: "daySchedule",
  })
  @nestAccessControl.UseRoles({
    resource: "DaySchedule",
    action: "read",
    possession: "any",
  })
  async resolveFieldDaySchedule(
    @graphql.Parent() parent: ScheduleInterval
  ): Promise<DaySchedule | null> {
    const result = await this.service.getDaySchedule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
